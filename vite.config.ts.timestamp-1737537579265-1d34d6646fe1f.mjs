// vite.config.ts
import "file:///Users/hugoaverty/Library/Mobile%20Documents/com~apple~CloudDocs/1_Travail/1_Projets/1_In%20progress/wa-hp/node_modules/dotenv/config.js";
import { defineConfig } from "file:///Users/hugoaverty/Library/Mobile%20Documents/com~apple~CloudDocs/1_Travail/1_Projets/1_In%20progress/wa-hp/node_modules/vite/dist/node/index.js";
import { getMaps, getMapsOptimizers, getMapsScripts, LogLevel } from "file:///Users/hugoaverty/Library/Mobile%20Documents/com~apple~CloudDocs/1_Travail/1_Projets/1_In%20progress/wa-hp/node_modules/wa-map-optimizer-vite/dist/index.js";
var maps = getMaps();
var optimizerOptions = {
  logs: process.env.LOG_LEVEL && process.env.LOG_LEVEL in LogLevel ? LogLevel[process.env.LOG_LEVEL] : LogLevel.NORMAL
};
if (process.env.TILESET_OPTIMIZATION && process.env.TILESET_OPTIMIZATION === "true") {
  const qualityMin = process.env.TILESET_OPTIMIZATION_QUALITY_MIN ? parseInt(process.env.TILESET_OPTIMIZATION_QUALITY_MIN) : 0.9;
  const qualityMax = process.env.TILESET_OPTIMIZATION_QUALITY_MAX ? parseInt(process.env.TILESET_OPTIMIZATION_QUALITY_MAX) : 1;
  optimizerOptions.output = {
    tileset: {
      compress: {
        quality: [qualityMin, qualityMax]
      }
    }
  };
}
var vite_config_default = defineConfig({
  base: "./",
  build: {
    rollupOptions: {
      input: {
        index: "./index.html",
        ...getMapsScripts(maps)
      }
    }
  },
  plugins: [...getMapsOptimizers(maps, optimizerOptions)],
  server: {
    host: "localhost",
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, PATCH, OPTIONS",
      "Access-Control-Allow-Headers": "X-Requested-With, content-type, Authorization",
      "Cache-Control": "no-cache, no-store, must-revalidate"
    },
    open: "/"
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvaHVnb2F2ZXJ0eS9MaWJyYXJ5L01vYmlsZSBEb2N1bWVudHMvY29tfmFwcGxlfkNsb3VkRG9jcy8xX1RyYXZhaWwvMV9Qcm9qZXRzLzFfSW4gcHJvZ3Jlc3Mvd2EtaHBcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9odWdvYXZlcnR5L0xpYnJhcnkvTW9iaWxlIERvY3VtZW50cy9jb21+YXBwbGV+Q2xvdWREb2NzLzFfVHJhdmFpbC8xX1Byb2pldHMvMV9JbiBwcm9ncmVzcy93YS1ocC92aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvaHVnb2F2ZXJ0eS9MaWJyYXJ5L01vYmlsZSUyMERvY3VtZW50cy9jb21+YXBwbGV+Q2xvdWREb2NzLzFfVHJhdmFpbC8xX1Byb2pldHMvMV9JbiUyMHByb2dyZXNzL3dhLWhwL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0ICdkb3RlbnYvY29uZmlnJztcbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ2aXRlXCI7XG5pbXBvcnQgeyBnZXRNYXBzLCBnZXRNYXBzT3B0aW1pemVycywgZ2V0TWFwc1NjcmlwdHMsIExvZ0xldmVsLCBPcHRpbWl6ZU9wdGlvbnMgfSBmcm9tIFwid2EtbWFwLW9wdGltaXplci12aXRlXCI7XG5cbmNvbnN0IG1hcHMgPSBnZXRNYXBzKCk7XG5cbmxldCBvcHRpbWl6ZXJPcHRpb25zOiBPcHRpbWl6ZU9wdGlvbnMgPSB7XG4gICAgbG9nczogcHJvY2Vzcy5lbnYuTE9HX0xFVkVMICYmIHByb2Nlc3MuZW52LkxPR19MRVZFTCBpbiBMb2dMZXZlbCA/IExvZ0xldmVsW3Byb2Nlc3MuZW52LkxPR19MRVZFTF0gOiBMb2dMZXZlbC5OT1JNQUwsXG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuVElMRVNFVF9PUFRJTUlaQVRJT04gJiYgcHJvY2Vzcy5lbnYuVElMRVNFVF9PUFRJTUlaQVRJT04gPT09IFwidHJ1ZVwiKSB7XG4gICAgY29uc3QgcXVhbGl0eU1pbiA9IHByb2Nlc3MuZW52LlRJTEVTRVRfT1BUSU1JWkFUSU9OX1FVQUxJVFlfTUlOID8gcGFyc2VJbnQocHJvY2Vzcy5lbnYuVElMRVNFVF9PUFRJTUlaQVRJT05fUVVBTElUWV9NSU4pIDogMC45O1xuICAgIGNvbnN0IHF1YWxpdHlNYXggPSBwcm9jZXNzLmVudi5USUxFU0VUX09QVElNSVpBVElPTl9RVUFMSVRZX01BWCA/IHBhcnNlSW50KHByb2Nlc3MuZW52LlRJTEVTRVRfT1BUSU1JWkFUSU9OX1FVQUxJVFlfTUFYKSA6IDE7XG5cbiAgICBvcHRpbWl6ZXJPcHRpb25zLm91dHB1dCA9IHtcbiAgICAgICAgdGlsZXNldDoge1xuICAgICAgICAgICAgY29tcHJlc3M6IHtcbiAgICAgICAgICAgICAgICBxdWFsaXR5OiBbcXVhbGl0eU1pbiwgcXVhbGl0eU1heF0sXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gICAgYmFzZTogXCIuL1wiLFxuICAgIGJ1aWxkOiB7XG4gICAgICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IFwiLi9pbmRleC5odG1sXCIsXG4gICAgICAgICAgICAgICAgLi4uZ2V0TWFwc1NjcmlwdHMobWFwcyksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgcGx1Z2luczogWy4uLmdldE1hcHNPcHRpbWl6ZXJzKG1hcHMsIG9wdGltaXplck9wdGlvbnMpXSxcbiAgICBzZXJ2ZXI6IHtcbiAgICAgICAgaG9zdDogXCJsb2NhbGhvc3RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIjogXCIqXCIsXG4gICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcIjogXCJHRVQsIFBPU1QsIFBVVCwgREVMRVRFLCBQQVRDSCwgT1BUSU9OU1wiLFxuICAgICAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCI6IFwiWC1SZXF1ZXN0ZWQtV2l0aCwgY29udGVudC10eXBlLCBBdXRob3JpemF0aW9uXCIsXG4gICAgICAgICAgICBcIkNhY2hlLUNvbnRyb2xcIjogXCJuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZVwiLFxuICAgICAgICB9LFxuICAgICAgICBvcGVuOiBcIi9cIixcbiAgICB9LFxufSk7XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQXdlLE9BQU87QUFDL2UsU0FBUyxvQkFBb0I7QUFDN0IsU0FBUyxTQUFTLG1CQUFtQixnQkFBZ0IsZ0JBQWlDO0FBRXRGLElBQU0sT0FBTyxRQUFRO0FBRXJCLElBQUksbUJBQW9DO0FBQUEsRUFDcEMsTUFBTSxRQUFRLElBQUksYUFBYSxRQUFRLElBQUksYUFBYSxXQUFXLFNBQVMsUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTO0FBQ2xIO0FBRUEsSUFBSSxRQUFRLElBQUksd0JBQXdCLFFBQVEsSUFBSSx5QkFBeUIsUUFBUTtBQUNqRixRQUFNLGFBQWEsUUFBUSxJQUFJLG1DQUFtQyxTQUFTLFFBQVEsSUFBSSxnQ0FBZ0MsSUFBSTtBQUMzSCxRQUFNLGFBQWEsUUFBUSxJQUFJLG1DQUFtQyxTQUFTLFFBQVEsSUFBSSxnQ0FBZ0MsSUFBSTtBQUUzSCxtQkFBaUIsU0FBUztBQUFBLElBQ3RCLFNBQVM7QUFBQSxNQUNMLFVBQVU7QUFBQSxRQUNOLFNBQVMsQ0FBQyxZQUFZLFVBQVU7QUFBQSxNQUNwQztBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQ0o7QUFFQSxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUN4QixNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsSUFDSCxlQUFlO0FBQUEsTUFDWCxPQUFPO0FBQUEsUUFDSCxPQUFPO0FBQUEsUUFDUCxHQUFHLGVBQWUsSUFBSTtBQUFBLE1BQzFCO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFBQSxFQUNBLFNBQVMsQ0FBQyxHQUFHLGtCQUFrQixNQUFNLGdCQUFnQixDQUFDO0FBQUEsRUFDdEQsUUFBUTtBQUFBLElBQ0osTUFBTTtBQUFBLElBQ04sU0FBUztBQUFBLE1BQ0wsK0JBQStCO0FBQUEsTUFDL0IsZ0NBQWdDO0FBQUEsTUFDaEMsZ0NBQWdDO0FBQUEsTUFDaEMsaUJBQWlCO0FBQUEsSUFDckI7QUFBQSxJQUNBLE1BQU07QUFBQSxFQUNWO0FBQ0osQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
